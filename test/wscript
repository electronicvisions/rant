#!/usr/bin/env python
import sys, os

components = ['gtest', '..']
recurse    = lambda ctx : map(lambda proj: ctx.recurse(proj), components)

def options(opt):
    recurse(opt)
    opt.load('compiler_cxx')
    opt.load('boost')
    opt.add_option('--no-deprecated-tests', action='store_true', default=False,
            dest='nodepr', help='build without deprecated tests')

def configure(cfg):
    recurse(cfg)
    cfg.load('compiler_cxx')
    cfg.load('boost')

    cfg.check_boost(
            lib='serialization system thread',
            uselib_store='BOOST')

    # boost::multiprecision has been introduced in 1.53
    if cfg.env.BOOST_VERSION < '1_53':
        cfg.check_cxx(lib=['gmp', 'gmpxx'], uselib_store='GMP',
                defines='USE_GMP')

    # build with gcov extension if any of the following coverage tools is installed
    cov = ['lcov', 'gcovr']
    if any([cfg.find_program(ii, mandatory=False) for ii in cov]):
        cfg.check_cxx(lib='gcov', linkflags='--coverage', cxxflags='--coverage')

def build(bld):
    recurse(bld)

    sources = bld.path.ant_glob('*.cc') \
            + bld.path.ant_glob('regression/*.cc')
    if not bld.options.nodepr:
        sources += bld.path.ant_glob('deprecated/*.cc')

    cxxflags = [
            '-g',
            '-O0',
            '-std=c++0x',
            '-Wall',
            '-Wextra',
            '-pedantic',
            #'-DRANT_DISABLE',
            #'-DRANT_LIGHTWEIGHT_EXCEPTIONS',
            ]

    bld(target          = 'rant-tests',
        features        = 'cxx cxxprogram',
        source          = sources,
        use             = ['rant', 'gtest', 'BOOST', 'GCOV', 'GMP'],
        install_path    = 'bin',
        cxxflags        = cxxflags)
